[
 {
  "allow_guest": 0,
  "api_method": null,
  "cron_format": null,
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "Before Insert",
  "enable_rate_limit": 0,
  "event_frequency": "All",
  "modified": "2022-12-20 12:07:17.045697",
  "module": null,
  "name": "get attendance list",
  "rate_limit_count": 0,
  "rate_limit_seconds": 0,
  "reference_doctype": "Attendance",
  "script": "\n\nget_attendance_list = frappe.db.sql(f\"\"\"\n    SELECT * FROM `tabAttendance` WHERE status='Present';\"\"\")\n    \nfrappe.response[\"messgae\"] = get_attendance_list",
  "script_type": "DocType Event"
 },
 {
  "allow_guest": 0,
  "api_method": null,
  "cron_format": null,
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "Before Insert",
  "enable_rate_limit": 0,
  "event_frequency": "All",
  "modified": "2022-06-20 17:37:55.461736",
  "module": null,
  "name": "Late Approval",
  "rate_limit_count": 0,
  "rate_limit_seconds": 0,
  "reference_doctype": "Attendance",
  "script": "approval = frappe.get_all(\"Late Approval Request\", filters={\n    \"employee\":[\"=\",doc.employee],\n    \"docstatus\": [\"=\", 1],\n    \"late_date\": [\"=\", doc.attendance_date]\n})\n\nif(len(approval) > 0):\n    doc.late_approved = True",
  "script_type": "DocType Event"
 },
 {
  "allow_guest": 0,
  "api_method": null,
  "cron_format": null,
  "disabled": 1,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "Before Submit",
  "enable_rate_limit": 0,
  "event_frequency": "All",
  "modified": "2024-08-22 12:12:48.423304",
  "module": null,
  "name": "Creating Quarter Leave Application on Submitting Quarter Attendance",
  "rate_limit_count": 5,
  "rate_limit_seconds": 86400,
  "reference_doctype": "Attendance",
  "script": "\n    \n    \n    \n    \n    \nif doc.custom_quarter_day ==  1 and doc.status == 'Present' :\n    \n    \n    la_doc = frappe.get_doc({\n        \"doctype\": \"Leave Application\",\n        \"employee\": doc.employee ,\n        \"leave_type\" : \"Leave Without Pay\",\n        \"from_date\": doc.attendance_date ,\n        \"to_date\": doc.attendance_date ,\n        \"custom_quarter_day\": 1 ,\n        \"total_leave_days\" : 0.25 ,\n        \"status\": \"Approved\",\n        \"docstatus\": 1 ,\n    })\n        \n    la_doc.insert()\n\n    \n    \n    ",
  "script_type": "DocType Event"
 },
 {
  "allow_guest": 0,
  "api_method": null,
  "cron_format": null,
  "disabled": 1,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "After Submit",
  "enable_rate_limit": 0,
  "event_frequency": "All",
  "modified": "2024-08-22 12:14:23.933292",
  "module": null,
  "name": "Removing Leave From Attendance",
  "rate_limit_count": 5,
  "rate_limit_seconds": 86400,
  "reference_doctype": "Attendance",
  "script": "\n\n\n\n\nif doc.custom_quarter_day == 1 and doc.status == 'Present' :\n    \n    att_list = frappe.get_list(\"Attendance\",\n                    filters={\n                        \"employee\" : doc.employee ,\n                        \"attendance_date\" : doc.attendance_date ,\n                        # \"status\" : \"On Leave\" ,\n                        \n                    }, fields = ['name','status'] )\n            \n    l = len(att_list)        \n            \n    # frappe.msgprint(str(l))        \n                    \n    if len(att_list) == 2 :\n        \n        \n        if att_list[0].status == 'On Leave' :\n            att_doc = frappe.get_doc(\"Attendance\",att_list[0].name)\n            # frappe.msgprint(str(att_doc.name))\n            att_doc.cancel()\n            att_doc.delete()\n            \n        elif att_list[1].status == 'On Leave' :\n            att_doc = frappe.get_doc(\"Attendance\",att_list[1].name)\n            # frappe.msgprint(str(att_doc.name))\n            att_doc.cancel()\n            att_doc.delete()\n\n    \n\n    \n    \n    \n    \n    \n    ",
  "script_type": "DocType Event"
 },
 {
  "allow_guest": 0,
  "api_method": null,
  "cron_format": null,
  "disabled": 1,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "Before Submit",
  "enable_rate_limit": 0,
  "event_frequency": "All",
  "modified": "2024-08-22 16:28:33.096961",
  "module": null,
  "name": "IN OUT According to Shift Type",
  "rate_limit_count": 5,
  "rate_limit_seconds": 86400,
  "reference_doctype": "Attendance",
  "script": "\nt_w_h = 0\nemp_doc = frappe.get_doc(\"Employee\",doc.employee)\nif emp_doc.custom_overtime_status != 'YES' :\n\n    if doc.status == 'Present':\n        if doc.shift and doc.in_time and doc.out_time:\n            \n            \n            shift_doc = frappe.get_doc(\"Shift Type\", doc.shift)\n            s_t = frappe.utils.get_time(shift_doc.start_time)\n            e_t = frappe.utils.get_time(shift_doc.end_time)\n            \n            \n            \n            \n            in_time = frappe.utils.get_time(doc.in_time)\n            out_time = frappe.utils.get_time(doc.out_time)\n           \n            \n            final_in_time = []\n            final_out_time = []\n            \n            if s_t >= in_time:\n                final_in_time = s_t\n            else:\n                final_in_time = in_time\n                \n            if e_t <= out_time:\n                final_out_time = e_t\n            else:\n                final_out_time = out_time    \n            \n            final_in_time = frappe.utils.format_time(final_in_time)\n            final_out_time = frappe.utils.format_time(final_out_time)\n            \n           \n            \n    \n            t_w_h = frappe.utils.time_diff_in_hours(final_out_time, final_in_time)\n            doc.working_hours = t_w_h\n            \n# if doc.status == 'Present':           \n#     shift_doc = frappe.get_doc(\"Shift Type\", doc.shift)\n#     Quarter_threshold = float(shift_doc.custom_working_hours_threshold_for_quarter)\n#     Half_threshold = float(shift_doc.working_hours_threshold_for_half_day)\n    \n#     if Half_threshold < t_w_h < Quarter_threshold:\n#         doc.custom_quarter_day = 1\n            \n            \n            \n            # doc.update()",
  "script_type": "DocType Event"
 },
 {
  "allow_guest": 0,
  "api_method": null,
  "cron_format": null,
  "disabled": 1,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "Before Submit",
  "enable_rate_limit": 0,
  "event_frequency": "All",
  "modified": "2024-08-06 16:40:14.219875",
  "module": null,
  "name": "Creating Quarter Leave From Quarter Attendance And Also Update Table In Attendance",
  "rate_limit_count": 5,
  "rate_limit_seconds": 86400,
  "reference_doctype": "Attendance",
  "script": "\n\n\nif doc.in_time and doc.out_time :\n    in_time = doc.in_time\n    out_time = doc.out_time\n    shift = doc.shift\n    \n    \n    time_difference = frappe.utils.get_datetime(out_time) - frappe.utils.get_datetime(in_time)\n    hours_difference = time_difference.total_seconds() / 3600\n    \n    \n    shift_doc = frappe.get_doc(\"Shift Type\", doc.shift)\n    \n    \n    Quarter_threshold = float(shift_doc.custom_working_hours_threshold_for_quarter)\n    Half_threshold = float(shift_doc.working_hours_threshold_for_half_day)\n    \n\n    if Half_threshold < hours_difference < Quarter_threshold:\n        doc.custom_quarter_day = 1\n        \n        q_from_time = frappe.utils.get_time(doc.out_time)\n        \n        la_doc = frappe.get_doc({\n            \"doctype\": \"Leave Application\",\n            \"employee\": doc.employee ,\n            \"leave_type\" : \"Leave Without Pay\",\n            \"from_date\": doc.attendance_date ,\n            \"to_date\": doc.attendance_date ,\n            \"custom_created_from_attendance\" : 1 ,\n            \"custom_quarter_day\": 1 ,\n            \"custom_from_time\" : q_from_time ,\n            \"total_leave_days\" : 0.25 ,\n            \"status\": \"Approved\",\n            \"docstatus\": 1 ,\n        })\n        la_doc.insert()\n        \n       \n        doc.append('custom_leave_applications', {\n            'leave_application': la_doc.name ,\n            'type': 'Quarter Day' ,\n            'from_time': la_doc.custom_from_time ,\n            'to_time' : la_doc.custom_to_time\n        })\n        # doc.db_update()\n        \n            \n                    \n                    \n                    \n                    \n                    \n                    \n                    \n                    \n                    \n    ",
  "script_type": "DocType Event"
 },
 {
  "allow_guest": 0,
  "api_method": null,
  "cron_format": null,
  "disabled": 1,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "Before Insert",
  "enable_rate_limit": 0,
  "event_frequency": "All",
  "modified": "2024-08-23 11:04:43.290216",
  "module": null,
  "name": "Over Time Calculation",
  "rate_limit_count": 5,
  "rate_limit_seconds": 86400,
  "reference_doctype": "Attendance",
  "script": "def safe_time_diff_in_hours(start_time, end_time):\n    \"\"\"Calculate the time difference in hours using frappe.utils, handling None values.\"\"\"\n    if start_time is None or end_time is None:\n        # frappe.msgprint(\"Cannot calculate time difference because one or both times are None.\")\n        return 0.0\n    try:\n        # Convert times to strings in the format required by frappe.utils.time_diff_in_hours\n        start_time_str = str(start_time)\n        end_time_str = str(end_time)\n        \n        # Calculate the time difference in hours\n        time_diff = frappe.utils.time_diff_in_hours(end_time_str, start_time_str)\n        return time_diff\n    except Exception as e:\n        # frappe.msgprint(f\"Error calculating time difference: {e}\")\n        return 0.0\n\nemployee = frappe.get_doc(\"Employee\", doc.employee)\n\nif doc.shift:\n    shift = frappe.get_doc(\"Shift Type\", doc.shift)\n\n# Ensure all required fields are present\nif doc.in_time and doc.out_time and shift.start_time and shift.end_time and employee.custom_overtime_status == \"Yes\":\n    # Get times and convert them\n    in_time = frappe.utils.get_time(doc.in_time)\n    out_time = frappe.utils.get_time(doc.out_time)\n    shift_in_time = frappe.utils.get_time(shift.start_time)\n    shift_out_time = frappe.utils.get_time(shift.end_time)\n\n    # Print times for debugging\n    # frappe.msgprint(f\"In Time: {in_time}\")\n    # frappe.msgprint(f\"Out Time: {out_time}\")\n    # frappe.msgprint(f\"Shift Start Time: {shift_in_time}\")\n    # frappe.msgprint(f\"Shift End Time: {shift_out_time}\")\n\n    # Check for None values\n    if None in (in_time, out_time, shift_in_time, shift_out_time):\n        # Print which values are None\n        if in_time is None:\n            frappe.msgprint(\"In Time is None.\")\n        if out_time is None:\n            frappe.msgprint(\"Out Time is None.\")\n        if shift_in_time is None:\n            frappe.msgprint(\"Shift Start Time is None.\")\n        if shift_out_time is None:\n            frappe.msgprint(\"Shift End Time is None.\")\n        \n        # frappe.msgprint(\"One or more time values are None. Check the input data.\")\n        doc.custom_over_time_hours = 0.0\n    else:\n        # Calculate early arrival time\n        if in_time < shift_in_time:\n            # frappe.msgprint(f\"Condition in_time < shift_in_time is True: {in_time} < {shift_in_time}\")\n            early_arrival_time = safe_time_diff_in_hours(shift_in_time, in_time)\n            # frappe.msgprint(f\"Early Arrival Time: {early_arrival_time} hours\")\n        else:\n            early_arrival_time = 0.0\n            # frappe.msgprint(\"No early arrival time to calculate.\")\n\n        # Calculate late departure time\n        if out_time > shift_out_time:\n            # frappe.msgprint(f\"Condition out_time > shift_out_time is True: {out_time} > {shift_out_time}\")\n            late_departure_time = safe_time_diff_in_hours(out_time, shift_out_time)\n            # frappe.msgprint(f\"Late Departure Time: {late_departure_time} hours\")\n        else:\n            late_departure_time = 0.0\n            # frappe.msgprint(\"No late departure time to calculate.\")\n\n        # Total overtime is the sum of early arrival and late departure times\n        total_hours = early_arrival_time + late_departure_time\n        # frappe.msgprint(f\"Total Overtime Hours: {total_hours} hours\")\n        if total_hours < 0 :\n            total_hours = -1 * (total_hours)\n        doc.custom_over_time_hours = total_hours\nelse:\n    # frappe.msgprint(\"Required fields are missing or employee does not have overtime status enabled.\")\n    doc.custom_over_time_hours = 0.0\n\n\n\n\n\n\n\n\n\n\n\n\n# # Retrieve employee and shift records\n# employee = frappe.get_doc(\"Employee\", doc.employee)\n# if doc.shift:\n#     shift = frappe.get_doc(\"Shift Type\", doc.shift)\n\n# # Ensure all required fields are present\n# if doc.in_time and doc.out_time and shift.end_time and employee.custom_overtime_status == \"Yes\":\n#     in_time = frappe.utils.get_time(doc.in_time)\n#     out_time_time = frappe.utils.get_time(doc.out_time)\n    \n#     shift_in_time = frappe.utils.get_time(shift.start_time)\n#     shift_out_time = frappe.utils.get_time(shift.end_time)\n    \n#     final_in_time = frappe.utils.format_time(in_time)\n#     final_out_time = frappe.utils.format_time(out_time_time)\n    \n#     final_shift_in_time = frappe.utils.format_time(shift_in_time)\n#     final_shift_out_time = frappe.utils.format_time(shift_out_time)\n            \n           \n            \n    \n#      # Calculate early arrival time\n#     early_arrival_time = frappe.utils.time_diff_in_hours(final_shift_in_time , final_shift_in_time)\n#     # Calculate overtime (late departure time)\n#     late_departure_time = frappe.utils.time_diff_in_hours(final_out_time , final_shift_out_time)\n    \n#     total = frappe.utils.time_diff_in_hours(late_departure_time, early_arrival_time)\n#     total_hours = total.total_seconds() / 3600.0\n#     frappe.msgprint(total_hours)\n#     doc.custom_over_time_hours = total_hours\n    \n    \n    \n    \n\n   \n#     # if out_time_time > shift_time:\n        \n#     #     total = frappe.utils.time_diff_in_hours(final_out_time, final_shift_time)\n#     #     # total_hours = total.total_seconds() / 3600.0\n#     #     doc.custom_over_time_hours = total\n#     # else:\n#     #     doc.custom_over_time_hours = 0.0\n# else:\n#     doc.custom_over_time_hours = 0.0\n   ",
  "script_type": "DocType Event"
 },
 {
  "allow_guest": 0,
  "api_method": null,
  "cron_format": null,
  "disabled": 1,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "Before Submit",
  "enable_rate_limit": 0,
  "event_frequency": "All",
  "modified": "2024-09-26 19:00:40.094170",
  "module": null,
  "name": "in out test",
  "rate_limit_count": 5,
  "rate_limit_seconds": 86400,
  "reference_doctype": "Attendance",
  "script": "\nemp_doc = frappe.get_doc(\"Employee\",doc.employee)\n\n\nif doc.shift and doc.in_time and doc.out_time:\n    \n    shift_doc = frappe.get_doc(\"Shift Type\", doc.shift)\n    s_t = frappe.utils.get_time(shift_doc.start_time)\n    e_t = frappe.utils.get_time(shift_doc.end_time)\n    \n    shift_start_time = frappe.utils.get_datetime(str(doc.in_time.date()) + \" \" + str(s_t))\n    shift_end_time = frappe.utils.get_datetime(str(doc.in_time.date()) + \" \" + str(e_t))\n    \n    emp_ch_list = frappe.get_list(\"Employee Checkin\",\n                    filters={\n                        'employee': doc.employee,\n                        'time': [\"Between\", (doc.in_time, doc.out_time)],\n                    },\n                    order_by='time',)\n    \n    total_working_seconds = 0\n    total_overtime_seconds = 0\n    last_checkin_time = None\n    last_log_type = None\n    \n    for emp_ch in emp_ch_list:\n        emp_ch_doc = frappe.get_doc(\"Employee Checkin\", emp_ch.name)\n        \n        checkin_time = frappe.utils.get_datetime(emp_ch_doc.time)\n        \n        if checkin_time < shift_start_time:\n            overtime_start_time = checkin_time\n            checkin_time = shift_start_time\n            \n            time_diff = frappe.utils.time_diff_in_seconds(checkin_time, overtime_start_time)\n            total_overtime_seconds = total_overtime_seconds + time_diff\n        elif checkin_time > shift_end_time:\n            \n            overtime_end_time = checkin_time\n            checkin_time = shift_end_time\n            time_diff = frappe.utils.time_diff_in_seconds(overtime_end_time, checkin_time)\n            total_overtime_seconds = total_overtime_seconds + time_diff\n        \n        if emp_ch_doc.log_type == \"IN\":\n            if last_log_type != \"IN\":\n                last_checkin_time = checkin_time\n            last_log_type = \"IN\"\n        \n        elif emp_ch_doc.log_type == \"OUT\" and last_checkin_time:\n            if last_log_type == \"IN\":\n                if checkin_time > shift_end_time:\n                    checkin_time = shift_end_time\n                \n                time_diff = frappe.utils.time_diff_in_seconds(checkin_time, last_checkin_time)\n                total_working_seconds = total_working_seconds + time_diff\n                last_checkin_time = None\n            \n            last_log_type = \"OUT\"\n    \n    \n    if last_checkin_time:\n        if last_checkin_time < shift_end_time:\n            last_checkin_time = shift_end_time\n        overtime_end_time = frappe.utils.get_datetime(str(doc.out_time.date()) + \" \" + str(doc.out_time.time()))\n        if last_checkin_time < overtime_end_time:\n            time_diff = frappe.utils.time_diff_in_seconds(overtime_end_time, last_checkin_time)\n            total_overtime_seconds = total_overtime_seconds + time_diff\n\n    total_working_hours = total_working_seconds / 3600\n    total_overtime_hours = total_overtime_seconds / 3600\n\n    total_working_hours = round(total_working_hours, 2)\n    total_overtime_hours = round(total_overtime_hours, 2)\n\n\n    doc.working_hours = total_working_hours\n    \n    \n    \n    \n    \n    \n    \n    total_seconds_in_company = 0\n    last_checkin_time = None\n  \n    for emp_ch in emp_ch_list:\n        emp_ch_doc = frappe.get_doc(\"Employee Checkin\", emp_ch.name)\n        checkin_time = frappe.utils.get_datetime(emp_ch_doc.time)\n    \n        if emp_ch_doc.log_type == \"IN\":\n            if last_checkin_time is None:\n                last_checkin_time = checkin_time\n        elif emp_ch_doc.log_type == \"OUT\" and last_checkin_time:\n            time_diff = frappe.utils.time_diff_in_seconds(checkin_time, last_checkin_time)\n            total_seconds_in_company = total_seconds_in_company + time_diff\n            last_checkin_time = None\n    \n    total_hours_in_company = total_seconds_in_company / 3600\n    total_hours_in_company = round(total_hours_in_company, 2)\n    \n    if emp_doc.custom_overtime_status == 'Yes' :\n        doc.custom_over_time_hours = total_hours_in_company - total_working_hours\n            \n            \n            \n            \n            \n            \n            \n            \n            \nif doc.status == 'On Leave':\n\n    start_datetime = frappe.utils.get_datetime(doc.attendance_date)\n    end_datetime = frappe.utils.add_to_date(start_datetime, hours=23, minutes=59, seconds=59)\n\n    emp_ch_list = frappe.get_list(\"Employee Checkin\",\n            filters={\n                'employee': doc.employee,\n                'time': [\"Between\", (start_datetime, end_datetime)],\n            },\n            order_by='time',)\n\n    if emp_ch_list :\n\n        shift_doc = frappe.get_doc(\"Shift Type\", doc.shift)\n        s_t = frappe.utils.get_time(shift_doc.start_time)\n        e_t = frappe.utils.get_time(shift_doc.end_time)\n        \n        shift_start_time = frappe.utils.get_datetime(str(doc.attendance_date) + \" \" + str(s_t))\n        shift_end_time = frappe.utils.get_datetime(str(doc.attendance_date) + \" \" + str(e_t))\n    \n            \n        \n        total_working_seconds = 0\n        total_overtime_seconds = 0\n        last_checkin_time = None\n        last_log_type = None\n        \n        for emp_ch in emp_ch_list:\n            emp_ch_doc = frappe.get_doc(\"Employee Checkin\", emp_ch.name)\n            \n            checkin_time = frappe.utils.get_datetime(emp_ch_doc.time)\n            \n            if checkin_time < shift_start_time:\n                overtime_start_time = checkin_time\n                checkin_time = shift_start_time\n                \n                time_diff = frappe.utils.time_diff_in_seconds(checkin_time, overtime_start_time)\n                total_overtime_seconds = total_overtime_seconds + time_diff\n            elif checkin_time > shift_end_time:\n                \n                overtime_end_time = checkin_time\n                checkin_time = shift_end_time\n                time_diff = frappe.utils.time_diff_in_seconds(overtime_end_time, checkin_time)\n                total_overtime_seconds = total_overtime_seconds + time_diff\n            \n            if emp_ch_doc.log_type == \"IN\":\n                if last_log_type != \"IN\":\n                    last_checkin_time = checkin_time\n                last_log_type = \"IN\"\n            \n            elif emp_ch_doc.log_type == \"OUT\" and last_checkin_time:\n                if last_log_type == \"IN\":\n                    if checkin_time > shift_end_time:\n                        checkin_time = shift_end_time\n                    \n                    time_diff = frappe.utils.time_diff_in_seconds(checkin_time, last_checkin_time)\n                    total_working_seconds = total_working_seconds + time_diff\n                    last_checkin_time = None\n                \n                last_log_type = \"OUT\"\n        \n        \n        if last_checkin_time:\n            if last_checkin_time < shift_end_time:\n                last_checkin_time = shift_end_time\n            overtime_end_time = frappe.utils.get_datetime(str(doc.out_time.date()) + \" \" + str(doc.out_time.time()))\n            if last_checkin_time < overtime_end_time:\n                time_diff = frappe.utils.time_diff_in_seconds(overtime_end_time, last_checkin_time)\n                total_overtime_seconds = total_overtime_seconds + time_diff\n    \n        total_working_hours = total_working_seconds / 3600\n        total_overtime_hours = total_overtime_seconds / 3600\n    \n        total_working_hours = round(total_working_hours, 2)\n        total_overtime_hours = round(total_overtime_hours, 2)\n    \n\n        total_seconds_in_company = 0\n        last_checkin_time = None\n        \n        for emp_ch in emp_ch_list:\n            emp_ch_doc = frappe.get_doc(\"Employee Checkin\", emp_ch.name)\n            checkin_time = frappe.utils.get_datetime(emp_ch_doc.time)\n        \n            if emp_ch_doc.log_type == \"IN\":\n                if last_checkin_time is None:\n                    last_checkin_time = checkin_time\n        \n            elif emp_ch_doc.log_type == \"OUT\" and last_checkin_time:\n                time_diff = frappe.utils.time_diff_in_seconds(checkin_time, last_checkin_time)\n                total_seconds_in_company = total_seconds_in_company + time_diff\n                last_checkin_time = None\n        \n    \n        total_hours_in_company = total_seconds_in_company / 3600\n        total_hours_in_company = round(total_hours_in_company, 2)\n        \n        \n        \n        \n        if emp_doc.custom_overtime_status == 'Yes' :\n            doc.custom_over_time_hours = total_hours_in_company - total_working_hours\n \n            \n            \n            \n            \n            \n            \n            \n            \n      ",
  "script_type": "DocType Event"
 },
 {
  "allow_guest": 0,
  "api_method": null,
  "cron_format": null,
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "After Submit",
  "enable_rate_limit": 0,
  "event_frequency": "All",
  "modified": "2024-10-15 16:49:54.464150",
  "module": null,
  "name": "Overtime Status",
  "rate_limit_count": 5,
  "rate_limit_seconds": 86400,
  "reference_doctype": "Attendance",
  "script": "\n\n\not_st = frappe.db.get_value(\"Employee\",doc.employee,'custom_overtime_status')\n\nif ot_st != 'Yes' :\n    frappe.db.set_value(\"Attendance\",doc.name,'custom_overtime_hours',0)",
  "script_type": "DocType Event"
 }
]